{"ast":null,"code":"var _s = $RefreshSig$();\nexport const PostingApi = () => {\n  _s();\n  const [readmeContent, setReadmeContent] = useState('');\n  useEffect(() => {\n    const postId = 'zja3400';\n    const postCategory = 'Blog-Posting';\n    const apiUrl = `https://api.github.com/repos/${postId}/${postCategory}/readme`;\n    axios.get(apiUrl).then(response => {\n      const contentBase64 = response.data.content;\n      const decodedContent = decodeBase64UTF8(contentBase64);\n      setReadmeContent(decodedContent);\n    }).catch(error => {\n      console.error('Error fetching README:', error);\n    });\n  }, []);\n\n  // Base64를 UTF-8 문자열로 디코딩\n  const decodeBase64UTF8 = base64 => {\n    const binaryString = atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return new TextDecoder('utf-8').decode(bytes);\n  };\n};\n_s(PostingApi, \"l9ochkLDlK7Ft+FG15fkiDI5Bwk=\");\n_c = PostingApi;\nvar _c;\n$RefreshReg$(_c, \"PostingApi\");","map":{"version":3,"names":["PostingApi","_s","readmeContent","setReadmeContent","useState","useEffect","postId","postCategory","apiUrl","axios","get","then","response","contentBase64","data","content","decodedContent","decodeBase64UTF8","catch","error","console","base64","binaryString","atob","bytes","Uint8Array","length","i","charCodeAt","TextDecoder","decode","_c","$RefreshReg$"],"sources":["C:/Users/Cheolho/Desktop/React-Blog/src/components/posting/PostingApi.js"],"sourcesContent":["\r\n\r\nexport const PostingApi = () => {\r\n    const [readmeContent, setReadmeContent] = useState('');\r\n  \r\n      useEffect(() => {\r\n        const postId = 'zja3400';\r\n        const postCategory = 'Blog-Posting';\r\n        const apiUrl = `https://api.github.com/repos/${postId}/${postCategory}/readme`;\r\n    \r\n        axios.get(apiUrl)\r\n          .then(response => {\r\n            const contentBase64 = response.data.content;\r\n            const decodedContent = decodeBase64UTF8(contentBase64);\r\n            setReadmeContent(decodedContent);\r\n          })\r\n          .catch(error => {\r\n            console.error('Error fetching README:', error);\r\n          });\r\n      }, []);\r\n\r\n      // Base64를 UTF-8 문자열로 디코딩\r\n      const decodeBase64UTF8 = base64 => {\r\n        const binaryString = atob(base64);\r\n        const bytes = new Uint8Array(binaryString.length);\r\n\r\n        for (let i = 0; i < binaryString.length; i++) {\r\n          bytes[i] = binaryString.charCodeAt(i);\r\n        }\r\n      \r\n        return new TextDecoder('utf-8').decode(bytes);\r\n      }\r\n}\r\n"],"mappings":";AAEA,OAAO,MAAMA,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd,MAAMC,MAAM,GAAG,SAAS;IACxB,MAAMC,YAAY,GAAG,cAAc;IACnC,MAAMC,MAAM,GAAI,gCAA+BF,MAAO,IAAGC,YAAa,SAAQ;IAE9EE,KAAK,CAACC,GAAG,CAACF,MAAM,CAAC,CACdG,IAAI,CAACC,QAAQ,IAAI;MAChB,MAAMC,aAAa,GAAGD,QAAQ,CAACE,IAAI,CAACC,OAAO;MAC3C,MAAMC,cAAc,GAAGC,gBAAgB,CAACJ,aAAa,CAAC;MACtDV,gBAAgB,CAACa,cAAc,CAAC;IAClC,CAAC,CAAC,CACDE,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMF,gBAAgB,GAAGI,MAAM,IAAI;IACjC,MAAMC,YAAY,GAAGC,IAAI,CAACF,MAAM,CAAC;IACjC,MAAMG,KAAK,GAAG,IAAIC,UAAU,CAACH,YAAY,CAACI,MAAM,CAAC;IAEjD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,YAAY,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC5CH,KAAK,CAACG,CAAC,CAAC,GAAGL,YAAY,CAACM,UAAU,CAACD,CAAC,CAAC;IACvC;IAEA,OAAO,IAAIE,WAAW,CAAC,OAAO,CAAC,CAACC,MAAM,CAACN,KAAK,CAAC;EAC/C,CAAC;AACP,CAAC;AAAAvB,EAAA,CA9BYD,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}